{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport firebase from 'firebase/compat/app';\nimport { getFirestore, getDoc, doc, setDoc } from 'firebase/firestore';\nimport { getAuth, GoogleAuthProvider, signInWithPopup, onAuthStateChanged } from \"firebase/auth\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyACmwJny4dIKj2eNf9zjJBh7RXQYYLYOoA\",\n  authDomain: \"crwn-ecmrc.firebaseapp.com\",\n  projectId: \"crwn-ecmrc\",\n  storageBucket: \"crwn-ecmrc.appspot.com\",\n  messagingSenderId: \"244151740534\",\n  appId: \"1:244151740534:web:15c063b1975a1f6bc9d757\",\n  measurementId: \"G-KTN9Z0281X\"\n};\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const authentication = getAuth(app);\nexport const firestore = getFirestore(app);\nexport const createUserProfileDocument = async (email, uid, displayName) => {\n  const userRef = doc(firestore, 'users', uid);\n  const snapShot = await getDoc(userRef);\n  if (!snapShot.exists()) {\n    const createdAt = new Date();\n    try {\n      await setDoc(userRef, {\n        uid,\n        email,\n        createdAt,\n        displayName\n      });\n      console.log('success');\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n  return userRef;\n};\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => signInWithPopup(authentication, provider);\nexport const onAuthStateChangedListener = callback => onAuthStateChanged(authentication, callback);\nexport default firebase;","map":{"version":3,"names":["initializeApp","firebase","getFirestore","getDoc","doc","setDoc","getAuth","GoogleAuthProvider","signInWithPopup","onAuthStateChanged","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","authentication","firestore","createUserProfileDocument","email","uid","displayName","userRef","snapShot","exists","createdAt","Date","console","log","err","message","provider","setCustomParameters","prompt","signInWithGoogle","onAuthStateChangedListener","callback"],"sources":["/mnt/BA343CAC343C6D8F/VISCODE/React/e-commerce/src/firebase/firebase.utils.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport firebase from 'firebase/compat/app';\nimport {getFirestore,getDoc, doc,setDoc} from 'firebase/firestore';\nimport {getAuth,GoogleAuthProvider,signInWithPopup,onAuthStateChanged} from \"firebase/auth\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyACmwJny4dIKj2eNf9zjJBh7RXQYYLYOoA\",\n  authDomain: \"crwn-ecmrc.firebaseapp.com\",\n  projectId: \"crwn-ecmrc\",\n  storageBucket: \"crwn-ecmrc.appspot.com\",\n  messagingSenderId: \"244151740534\",\n  appId: \"1:244151740534:web:15c063b1975a1f6bc9d757\",\n  measurementId: \"G-KTN9Z0281X\"\n};\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const authentication = getAuth(app);\nexport const firestore = getFirestore(app);\n\nexport const createUserProfileDocument = async (email,uid,displayName)=>{\n  const userRef = doc(firestore,'users',uid);\n  const snapShot =  await getDoc(userRef);\n  if(!snapShot.exists()){\n    const createdAt = new Date();\n          try{\n              await setDoc(userRef,{\n                uid,\n                email,\n                createdAt,\n                displayName,\n              });\n\n              console.log('success');\n              \n          }catch(err){\n              console.log(err.message);\n          }\n  }\n  return userRef;\n}\n\n\n\n\nconst provider =  new GoogleAuthProvider();\nprovider.setCustomParameters({prompt: 'select_account'});\nexport const signInWithGoogle = () => signInWithPopup(authentication,provider);\nexport const onAuthStateChangedListener = (callback) => onAuthStateChanged(authentication,callback);\n\nexport default firebase;"],"mappings":"AAAA;AACA,SAASA,aAAa,QAAQ,cAAc;AAC5C,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,SAAQC,YAAY,EAACC,MAAM,EAAEC,GAAG,EAACC,MAAM,QAAO,oBAAoB;AAClE,SAAQC,OAAO,EAACC,kBAAkB,EAACC,eAAe,EAACC,kBAAkB,QAAO,eAAe;AAC3F;AACA;;AAEA;AACA;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,4BAA4B;EACxCC,SAAS,EAAE,YAAY;EACvBC,aAAa,EAAE,wBAAwB;EACvCC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,2CAA2C;EAClDC,aAAa,EAAE;AACjB,CAAC;AACD;AACA,MAAMC,GAAG,GAAGlB,aAAa,CAACU,cAAc,CAAC;AACzC,OAAO,MAAMS,cAAc,GAAGb,OAAO,CAACY,GAAG,CAAC;AAC1C,OAAO,MAAME,SAAS,GAAGlB,YAAY,CAACgB,GAAG,CAAC;AAE1C,OAAO,MAAMG,yBAAyB,GAAG,OAAOC,KAAK,EAACC,GAAG,EAACC,WAAW,KAAG;EACtE,MAAMC,OAAO,GAAGrB,GAAG,CAACgB,SAAS,EAAC,OAAO,EAACG,GAAG,CAAC;EAC1C,MAAMG,QAAQ,GAAI,MAAMvB,MAAM,CAACsB,OAAO,CAAC;EACvC,IAAG,CAACC,QAAQ,CAACC,MAAM,EAAE,EAAC;IACpB,MAAMC,SAAS,GAAG,IAAIC,IAAI,EAAE;IACtB,IAAG;MACC,MAAMxB,MAAM,CAACoB,OAAO,EAAC;QACnBF,GAAG;QACHD,KAAK;QACLM,SAAS;QACTJ;MACF,CAAC,CAAC;MAEFM,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAE1B,CAAC,QAAMC,GAAG,EAAC;MACPF,OAAO,CAACC,GAAG,CAACC,GAAG,CAACC,OAAO,CAAC;IAC5B;EACR;EACA,OAAOR,OAAO;AAChB,CAAC;AAKD,MAAMS,QAAQ,GAAI,IAAI3B,kBAAkB,EAAE;AAC1C2B,QAAQ,CAACC,mBAAmB,CAAC;EAACC,MAAM,EAAE;AAAgB,CAAC,CAAC;AACxD,OAAO,MAAMC,gBAAgB,GAAG,MAAM7B,eAAe,CAACW,cAAc,EAACe,QAAQ,CAAC;AAC9E,OAAO,MAAMI,0BAA0B,GAAIC,QAAQ,IAAK9B,kBAAkB,CAACU,cAAc,EAACoB,QAAQ,CAAC;AAEnG,eAAetC,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}