{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport firebase from 'firebase/compat/app';\nimport { getFirestore, getDoc, addDoc, collection, query, Timestamp, doc, setDoc } from 'firebase/firestore';\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nimport { useRef } from \"react\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyACmwJny4dIKj2eNf9zjJBh7RXQYYLYOoA\",\n  authDomain: \"crwn-ecmrc.firebaseapp.com\",\n  projectId: \"crwn-ecmrc\",\n  storageBucket: \"crwn-ecmrc.appspot.com\",\n  messagingSenderId: \"244151740534\",\n  appId: \"1:244151740534:web:15c063b1975a1f6bc9d757\",\n  measurementId: \"G-KTN9Z0281X\"\n};\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const authentication = getAuth(app);\nexport const firestore = getFirestore(app);\nexport const createUserProfileDocument = async userAuth => {\n  const userRef = doc(firestore, 'users', userAuth.uid);\n  const snapShot = await getDoc(userRef);\n  console.log(snapShot.exists());\n  if (!snapShot.exists()) {\n    const {\n      uid,\n      email,\n      displayName,\n      phoneNumber,\n      photoUrl\n    } = userAuth;\n    try {\n      await setDoc(useRef, {\n        uid,\n        email,\n        displayName,\n        phoneNumber,\n        photoUrl\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  return useRef;\n};\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => {\n  signInWithPopup(authentication, provider);\n};\nexport default firebase;","map":{"version":3,"names":["initializeApp","firebase","getFirestore","getDoc","addDoc","collection","query","Timestamp","doc","setDoc","getAuth","GoogleAuthProvider","signInWithPopup","useRef","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","authentication","firestore","createUserProfileDocument","userAuth","userRef","uid","snapShot","console","log","exists","email","displayName","phoneNumber","photoUrl","error","provider","setCustomParameters","prompt","signInWithGoogle"],"sources":["/mnt/BA343CAC343C6D8F/VISCODE/React/e-commerce/src/firebase/firebase.utils.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport firebase from 'firebase/compat/app';\nimport {getFirestore,getDoc,addDoc,collection,query,Timestamp, doc,setDoc} from 'firebase/firestore';\nimport {getAuth,GoogleAuthProvider,signInWithPopup} from \"firebase/auth\";\nimport { useRef } from \"react\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyACmwJny4dIKj2eNf9zjJBh7RXQYYLYOoA\",\n  authDomain: \"crwn-ecmrc.firebaseapp.com\",\n  projectId: \"crwn-ecmrc\",\n  storageBucket: \"crwn-ecmrc.appspot.com\",\n  messagingSenderId: \"244151740534\",\n  appId: \"1:244151740534:web:15c063b1975a1f6bc9d757\",\n  measurementId: \"G-KTN9Z0281X\"\n};\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const authentication = getAuth(app);\nexport const firestore = getFirestore(app);\n\nexport const createUserProfileDocument = async (userAuth)=>{\n\n  const userRef = doc(firestore,'users',userAuth.uid);\n  const snapShot =  await getDoc(userRef);\n  console.log(snapShot.exists());\n  if(!snapShot.exists()){\n    const {uid,email,displayName,phoneNumber,photoUrl} = userAuth;\n          try{\n              await setDoc(useRef,{\n                uid,email,displayName,phoneNumber,photoUrl\n              })\n              \n          }catch(error){\n              console.log(error);\n          }\n  }\n      \n  return useRef;\n}\n\n\n\n\nconst provider =  new GoogleAuthProvider();\nprovider.setCustomParameters({prompt: 'select_account'});\nexport const signInWithGoogle = () => {\n    signInWithPopup(authentication,provider);\n}\n\nexport default firebase;"],"mappings":"AAAA;AACA,SAASA,aAAa,QAAQ,cAAc;AAC5C,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,SAAQC,YAAY,EAACC,MAAM,EAACC,MAAM,EAACC,UAAU,EAACC,KAAK,EAACC,SAAS,EAAEC,GAAG,EAACC,MAAM,QAAO,oBAAoB;AACpG,SAAQC,OAAO,EAACC,kBAAkB,EAACC,eAAe,QAAO,eAAe;AACxE,SAASC,MAAM,QAAQ,OAAO;AAC9B;AACA;;AAEA;AACA;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,4BAA4B;EACxCC,SAAS,EAAE,YAAY;EACvBC,aAAa,EAAE,wBAAwB;EACvCC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,2CAA2C;EAClDC,aAAa,EAAE;AACjB,CAAC;AACD;AACA,MAAMC,GAAG,GAAGtB,aAAa,CAACc,cAAc,CAAC;AACzC,OAAO,MAAMS,cAAc,GAAGb,OAAO,CAACY,GAAG,CAAC;AAC1C,OAAO,MAAME,SAAS,GAAGtB,YAAY,CAACoB,GAAG,CAAC;AAE1C,OAAO,MAAMG,yBAAyB,GAAG,MAAOC,QAAQ,IAAG;EAEzD,MAAMC,OAAO,GAAGnB,GAAG,CAACgB,SAAS,EAAC,OAAO,EAACE,QAAQ,CAACE,GAAG,CAAC;EACnD,MAAMC,QAAQ,GAAI,MAAM1B,MAAM,CAACwB,OAAO,CAAC;EACvCG,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,MAAM,EAAE,CAAC;EAC9B,IAAG,CAACH,QAAQ,CAACG,MAAM,EAAE,EAAC;IACpB,MAAM;MAACJ,GAAG;MAACK,KAAK;MAACC,WAAW;MAACC,WAAW;MAACC;IAAQ,CAAC,GAAGV,QAAQ;IACvD,IAAG;MACC,MAAMjB,MAAM,CAACI,MAAM,EAAC;QAClBe,GAAG;QAACK,KAAK;QAACC,WAAW;QAACC,WAAW;QAACC;MACpC,CAAC,CAAC;IAEN,CAAC,QAAMC,KAAK,EAAC;MACTP,OAAO,CAACC,GAAG,CAACM,KAAK,CAAC;IACtB;EACR;EAEA,OAAOxB,MAAM;AACf,CAAC;AAKD,MAAMyB,QAAQ,GAAI,IAAI3B,kBAAkB,EAAE;AAC1C2B,QAAQ,CAACC,mBAAmB,CAAC;EAACC,MAAM,EAAE;AAAgB,CAAC,CAAC;AACxD,OAAO,MAAMC,gBAAgB,GAAG,MAAM;EAClC7B,eAAe,CAACW,cAAc,EAACe,QAAQ,CAAC;AAC5C,CAAC;AAED,eAAerC,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}