{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport firebase from 'firebase/compat/app';\nimport { getFirestore, getDoc, doc, setDoc } from 'firebase/firestore';\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyACmwJny4dIKj2eNf9zjJBh7RXQYYLYOoA\",\n  authDomain: \"crwn-ecmrc.firebaseapp.com\",\n  projectId: \"crwn-ecmrc\",\n  storageBucket: \"crwn-ecmrc.appspot.com\",\n  messagingSenderId: \"244151740534\",\n  appId: \"1:244151740534:web:15c063b1975a1f6bc9d757\",\n  measurementId: \"G-KTN9Z0281X\"\n};\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const authentication = getAuth(app);\nexport const firestore = getFirestore(app);\nlet i = 0;\nlet name = '';\nexport const createUserProfileDocument = async (userAuth, other) => {\n  console.log(other, '---------------', i++);\n  const userRef = doc(firestore, 'users', userAuth.uid);\n  const snapShot = await getDoc(userRef);\n  if (!snapShot.exists()) {\n    const {\n      uid,\n      email,\n      displayName = other,\n      phoneNumber,\n      photoURL\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userRef, {\n        uid,\n        email,\n        displayName,\n        phoneNumber,\n        photoURL,\n        createdAt\n      });\n      console.log('success', displayName);\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n  return userRef;\n};\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => {\n  signInWithPopup(authentication, provider);\n};\nexport default firebase;","map":{"version":3,"names":["initializeApp","firebase","getFirestore","getDoc","doc","setDoc","getAuth","GoogleAuthProvider","signInWithPopup","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","authentication","firestore","i","name","createUserProfileDocument","userAuth","other","console","log","userRef","uid","snapShot","exists","email","displayName","phoneNumber","photoURL","createdAt","Date","err","message","provider","setCustomParameters","prompt","signInWithGoogle"],"sources":["/mnt/BA343CAC343C6D8F/VISCODE/React/e-commerce/src/firebase/firebase.utils.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport firebase from 'firebase/compat/app';\nimport {getFirestore,getDoc, doc,setDoc} from 'firebase/firestore';\nimport {getAuth,GoogleAuthProvider,signInWithPopup} from \"firebase/auth\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyACmwJny4dIKj2eNf9zjJBh7RXQYYLYOoA\",\n  authDomain: \"crwn-ecmrc.firebaseapp.com\",\n  projectId: \"crwn-ecmrc\",\n  storageBucket: \"crwn-ecmrc.appspot.com\",\n  messagingSenderId: \"244151740534\",\n  appId: \"1:244151740534:web:15c063b1975a1f6bc9d757\",\n  measurementId: \"G-KTN9Z0281X\"\n};\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const authentication = getAuth(app);\nexport const firestore = getFirestore(app);\nlet i = 0;\nlet name = '';\n\n\nexport const createUserProfileDocument = async (userAuth,other)=>{\n  console.log(other,'---------------',i++);\n  const userRef = doc(firestore,'users',userAuth.uid);\n  const snapShot =  await getDoc(userRef);\n  if(!snapShot.exists()){\n    const {uid,email,displayName=other,phoneNumber,photoURL} = userAuth;\n    const createdAt = new Date();\n          try{\n              await setDoc(userRef,{\n                uid,\n                email,\n                displayName,\n                phoneNumber,\n                photoURL,\n                createdAt,\n              })\n\n              console.log('success',displayName);\n              \n          }catch(err){\n              console.log(err.message);\n          }\n  }\n  return userRef;\n}\n\n\n\n\nconst provider =  new GoogleAuthProvider();\nprovider.setCustomParameters({prompt: 'select_account'});\nexport const signInWithGoogle = () => {\n    signInWithPopup(authentication,provider);\n}\n\nexport default firebase;"],"mappings":"AAAA;AACA,SAASA,aAAa,QAAQ,cAAc;AAC5C,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,SAAQC,YAAY,EAACC,MAAM,EAAEC,GAAG,EAACC,MAAM,QAAO,oBAAoB;AAClE,SAAQC,OAAO,EAACC,kBAAkB,EAACC,eAAe,QAAO,eAAe;AACxE;AACA;;AAEA;AACA;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,4BAA4B;EACxCC,SAAS,EAAE,YAAY;EACvBC,aAAa,EAAE,wBAAwB;EACvCC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,2CAA2C;EAClDC,aAAa,EAAE;AACjB,CAAC;AACD;AACA,MAAMC,GAAG,GAAGjB,aAAa,CAACS,cAAc,CAAC;AACzC,OAAO,MAAMS,cAAc,GAAGZ,OAAO,CAACW,GAAG,CAAC;AAC1C,OAAO,MAAME,SAAS,GAAGjB,YAAY,CAACe,GAAG,CAAC;AAC1C,IAAIG,CAAC,GAAG,CAAC;AACT,IAAIC,IAAI,GAAG,EAAE;AAGb,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAQ,EAACC,KAAK,KAAG;EAC/DC,OAAO,CAACC,GAAG,CAACF,KAAK,EAAC,iBAAiB,EAACJ,CAAC,EAAE,CAAC;EACxC,MAAMO,OAAO,GAAGvB,GAAG,CAACe,SAAS,EAAC,OAAO,EAACI,QAAQ,CAACK,GAAG,CAAC;EACnD,MAAMC,QAAQ,GAAI,MAAM1B,MAAM,CAACwB,OAAO,CAAC;EACvC,IAAG,CAACE,QAAQ,CAACC,MAAM,EAAE,EAAC;IACpB,MAAM;MAACF,GAAG;MAACG,KAAK;MAACC,WAAW,GAACR,KAAK;MAACS,WAAW;MAACC;IAAQ,CAAC,GAAGX,QAAQ;IACnE,MAAMY,SAAS,GAAG,IAAIC,IAAI,EAAE;IACtB,IAAG;MACC,MAAM/B,MAAM,CAACsB,OAAO,EAAC;QACnBC,GAAG;QACHG,KAAK;QACLC,WAAW;QACXC,WAAW;QACXC,QAAQ;QACRC;MACF,CAAC,CAAC;MAEFV,OAAO,CAACC,GAAG,CAAC,SAAS,EAACM,WAAW,CAAC;IAEtC,CAAC,QAAMK,GAAG,EAAC;MACPZ,OAAO,CAACC,GAAG,CAACW,GAAG,CAACC,OAAO,CAAC;IAC5B;EACR;EACA,OAAOX,OAAO;AAChB,CAAC;AAKD,MAAMY,QAAQ,GAAI,IAAIhC,kBAAkB,EAAE;AAC1CgC,QAAQ,CAACC,mBAAmB,CAAC;EAACC,MAAM,EAAE;AAAgB,CAAC,CAAC;AACxD,OAAO,MAAMC,gBAAgB,GAAG,MAAM;EAClClC,eAAe,CAACU,cAAc,EAACqB,QAAQ,CAAC;AAC5C,CAAC;AAED,eAAetC,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}